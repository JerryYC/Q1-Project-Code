# -*- coding: utf-8 -*-
"""DoWhy_Example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-tu8c6HEn_24X1Rrigpjp8P8o-VYxhFD
"""

!pip install dowhy
import dowhy
import pandas as pd

data = pd.read_csv('https://raw.githubusercontent.com/zhw005/dowhy-datasets/main/heart.csv')
data.head()

"""Attribute Information

* Age: age of the patient [years]

* Sex: sex of the patient [M: Male, F: Female]

* ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]

* RestingBP: resting blood pressure [mm Hg]

* Cholesterol: serum cholesterol [mm/dl]

* FastingBS: fasting blood sugar [1: if FastingBS > 120 mg/dl, 0: otherwise]

* RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]

* MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]

* ExerciseAngina: exercise-induced angina [Y: Yes, N: No]

* Oldpeak: oldpeak = ST [Numeric value measured in depression]

* ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]

* HeartDisease: output class [1: heart disease, 0: Normal]
"""

# data cleaning
data.loc[data.ExerciseAngina == 'Y', 'ExerciseAngina'] = 1
data.loc[data.ExerciseAngina == 'N', 'ExerciseAngina'] = 0

data.head()

data.groupby(['ExerciseAngina'])['HeartDisease'].mean()

!apt-get install -y graphviz-dev
!sudo pip install pygraphviz

import pygraphviz

# 1. Model
model= dowhy.CausalModel(
        data = data,
        treatment='ExerciseAngina',
        outcome='HeartDisease',
        common_causes = 'Age')
model.view_model()

from IPython.display import Image, display
display(Image(filename="causal_model.png"))

# 2. Identify
identified_estimand = model.identify_effect(proceed_when_unidentifiable=True)
print(identified_estimand)

# 3. Estimate
estimate = model.estimate_effect(identified_estimand,
                                 method_name="backdoor.linear_regression",target_units="ate")
# ATE = Average Treatment Effect
# ATT = Average Treatment Effect on Treated (i.e. those who were assigned a different room)
# ATC = Average Treatment Effect on Control (i.e. those who were not assigned a different room)
print(estimate)

"""Having exercise-induced angina increases the chance of getting heart disease."""

# 4. Refute

# Radom Common Cause:- Adds randomly drawn covariates to data and re-runs the analysis to see if the causal estimate changes or not. 
# If our assumption was originally correct then the causal estimate shouldn’t change by much.
refute1_results=model.refute_estimate(identified_estimand, estimate,
        method_name="random_common_cause")
print(refute1_results)

# Placebo Treatment Refuter:- Randomly assigns any covariate as a treatment and re-runs the analysis. 
# If our assumptions were correct then this newly found out estimate should go to 0.
#refute2_results=model.refute_estimate(identified_estimand, estimate, 
#                                      method_name="placebo_treatment_refuter")
#print(refute2_results)

# Data Subset Refuter:- Creates subsets of the data(similar to cross-validation) and checks whether the causal estimates vary across subsets. 
# If our assumptions were correct there shouldn’t be much variation.
refute3_results=model.refute_estimate(identified_estimand, estimate,
        method_name="data_subset_refuter")
print(refute3_results)

"""We can see that our estimate passes all three refutation tests. This does not prove its correctness, but it increases confidence in the estimate."""

